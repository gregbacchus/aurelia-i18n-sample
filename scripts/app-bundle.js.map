{"version":3,"sources":["app.ts","environment.ts","main.ts","resources/index.ts"],"names":[],"mappings":";;;IAEA;QAKE,aAAqB,IAAU;YAA/B,iBAQC;YARoB,SAAI,GAAJ,IAAI,CAAM;YAF/B,YAAO,GAAG,cAAc,CAAC;YAGvB,IAAI,CAAC,IAAI;iBACN,SAAS,CAAC,OAAO,CAAC;iBAClB,IAAI,CAAC;gBAEJ,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;gBACnC,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;QACP,CAAC;QAZM,UAAM,GAAG,CAAC,mBAAI,CAAC,CAAC;QAazB,UAAC;KAdD,AAcC,IAAA;IAdY,kBAAG;;;;;;ICFhB,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;;ICEI,OAAQ,CAAC,MAAM,CAAC;QACpB,QAAQ,EAAE;YACR,gBAAgB,EAAE,KAAK;SACxB;KACF,CAAC,CAAC;IAEH,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC;aACpB,MAAM,CAAC,cAAc,EAAE,UAAC,QAAQ;YAC/B,IAAI,OAAO,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAE5B,+BAAgB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAG3C,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAInD,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;gBACpB,OAAO,EAAE;oBACP,QAAQ,EAAE,+BAA+B;iBAC1C;gBACD,UAAU,EAAE,OAAO;gBACnB,GAAG,EAAE,IAAI;gBACT,WAAW,EAAE,IAAI;gBACjB,KAAK,EAAE,KAAK;aACb,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEL,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAlCD,8BAkCC;;;;;;IC3CD,mBAA0B,MAA8B;IAExD,CAAC;IAFD,8BAEC","file":"app-bundle.js","sourcesContent":["import {I18N} from 'aurelia-i18n';\n\nexport class App {\n  static inject = [I18N];\n\n  message = 'Hello World!';\n\n  constructor(readonly i18n: I18N) {\n    this.i18n\n      .setLocale('en-US')\n      .then(() => {\n        // locale is loaded\n        console.log(this.i18n.getLocale());\n        console.log(this.i18n.tr('friend'));\n      });\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\nimport {I18N, Backend, TCustomAttribute} from 'aurelia-i18n';\n\n//Configure Bluebird Promises.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources')\n    .plugin('aurelia-i18n', (instance) => {\n      let aliases = ['t', 'i18n'];\n      // add aliases for 't' attribute\n      TCustomAttribute.configureAliases(aliases);\n\n      // register backend plugin\n      instance.i18next.use(Backend.with(aurelia.loader));\n\n      // adapt options to your needs (see http://i18next.com/docs/options/)\n      // make sure to return the promise of the setup method, in order to guarantee proper loading\n      return instance.setup({\n        backend: {                                  // <-- configure backend settings\n          loadPath: './locales/{{lng}}/{{ns}}.json', // <-- XHR settings for where to get the files from\n        },\n        attributes: aliases,\n        lng: 'de',\n        fallbackLng: 'en',\n        debug: false\n      });\n    });\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}